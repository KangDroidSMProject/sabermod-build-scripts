#!/bin/sh

# Copyright (C) 2013-2015 The SaberMod Project

#Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

cd $BUILD_PATH;

if [ $SET_TARGET_BUILD = "CLOOG" ];
then

    # Build and install cloog, isl and osl libraries into the toolchain.
    # Cloog Build Configuration
    cd $TOOLCHAIN_ROOT_SYMBOLIC/cloog/cloog-$SET_CLOOG_VERSION && ./configure $HOST_PREFIX --with-isl=bundled --with-osl=bundled --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET >> $MAKE_LOG 2>&1;

    echo "";
    echo "";
    echo "";
    echo "Compiling Cloog, and cloog dependencies ...";
    echo "";
    echo "";
    echo "";

    make $MAKE_FLAGS -k >> "$MAKE_LOG" 2>&1;
    make install -k >> "$MAKE_LOG" 2>&1;

    # cleanup
    make $MAKE_FLAGS clean -k >> "$MAKE_LOG" 2>&1;
    make $MAKE_FLAGS distclean -k >> "$MAKE_LOG" 2>&1;

    # untracked files
    rm -rf cloog-isl-uninstalled.pc cloog-isl-uninstalled.sh cloog-isl.pc cloog-isl.pc.in doc/gitversion.texi version.h isl/gitversion.h isl/include/isl/stdint.h isl/isl-uninstalled.pc isl/isl-uninstalled.sh isl/isl.pc isl/isl.pc.in;

    git reset --hard >> $MAKE_LOG 2>&1;

elif [ $SET_TARGET_BUILD = "ISL" ];
then

    # Build and install isl libraries into the toolchain.
    # ISL Build Configuration
    ./configure $HOST_PREFIX --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET >> $MAKE_LOG 2>&1;

    echo "";
    echo "";
    echo "";
    echo "Compiling ISL dependencies ...";
    echo "";
    echo "";
    echo "";

    make $MAKE_FLAGS -k >> "$MAKE_LOG" 2>&1;
    make install -k >> "$MAKE_LOG" 2>&1;

    # cleanup
    make $MAKE_FLAGS clean -k >> "$MAKE_LOG" 2>&1;
    make $MAKE_FLAGS distclean -k >> "$MAKE_LOG" 2>&1;

    # untracked files
    rm -rf gitversion.h include/isl/stdint.h isl-uninstalled.pc isl-uninstalled.sh isl.pc isl/isl.pc.in;

    git reset --hard >> $MAKE_LOG 2>&1;

elif [ $SET_TARGET_BUILD = "MPFR" ];
then

    # Build and install mpfr libraries into the toolchain.
    # MPFR Build Configuration
    cd $TOOLCHAIN_ROOT_SYMBOLIC/mpfr/mpfr-gnu && ./configure $HOST_PREFIX --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET >> $MAKE_LOG 2>&1;

    echo "";
    echo "";
    echo "";
    echo "Compiling MPFR dependencies ...";
    echo "";
    echo "";
    echo "";

    make $MAKE_FLAGS -k >> "$MAKE_LOG" 2>&1;
    make install -k >> "$MAKE_LOG" 2>&1;

    # cleanup
    make $MAKE_FLAGS clean -k >> "$MAKE_LOG" 2>&1;
    make $MAKE_FLAGS distclean -k >> "$MAKE_LOG" 2>&1;

    git reset --hard >> $MAKE_LOG 2>&1;

elif [ $SET_TARGET_BUILD = "GMP" ];
then

    # Build and install gmp libraries into the toolchain.
    # GMP Build Configuration
    cd $TOOLCHAIN_ROOT_SYMBOLIC/gmp/gmp-gnu && ./configure $HOST_PREFIX >> $MAKE_LOG 2>&1;

    echo "";
    echo "";
    echo "";
    echo "Compiling GMP dependencies ...";
    echo "";
    echo "";
    echo "";

    make $MAKE_FLAGS -k >> "$MAKE_LOG" 2>&1;
    make install -k >> "$MAKE_LOG" 2>&1;

    # cleanup
    make $MAKE_FLAGS clean -k >> "$MAKE_LOG" 2>&1;
    make $MAKE_FLAGS distclean -k >> "$MAKE_LOG" 2>&1;

    git reset --hard >> $MAKE_LOG 2>&1;

else
    if [ $SET_TARGET_BUILD = "GCC" ];
    then
        echo "";
        echo "";
        echo "";
        echo "Compiling sabermod toolchain $SET_TARGET-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR ...";

        # Build the toolchain
        make $MAKE_FLAGS -k >> "$MAKE_LOG" 2>&1;

        # Install the toolchain (twice)
        make install -k >> "$MAKE_LOG" 2>&1;

        # Clear variables
        unset ENABLE_O3;
        unset ENABLE_PTHREAD;
        unset SET_TARGET_GCC;
        unset LD_LIBRARY_PATH;
        unset C_INCLUDE_PATH;
        unset gcc_cv_use_emutls;
        unset libgomp_cv_have_attribute_visibility;
        unset VER;
        unset CORTEX_A15;
        unset NEON_VFPV4;
        unset CPLUS_INCLUDE_PATH;
        unset CORTEX;
        unset NEON;
    fi;
fi;
