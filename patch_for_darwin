From f06c03f9b923542d1da358e1d0672ecbbab911bd Mon Sep 17 00:00:00 2001
From: KangDroid <hyunwoo286@gmail.com>
Date: Wed, 29 Jul 2015 01:43:08 +0100
Subject: [PATCH] Support Darwin Environment for all

---
 arm/darwin/arm-eabi-4.8              |  21 +--
 arm/darwin/arm-eabi-4.9              |  21 +--
 arm/darwin/arm-eabi-5.1              |  21 +--
 arm/darwin/arm-eabi-5.2              |  19 ++-
 arm/darwin/arm-eabi-6.0              |  23 +--
 arm/darwin/arm-linux-androideabi-4.8 |  21 +--
 arm/darwin/arm-linux-androideabi-4.9 |  20 ++-
 arm/darwin/arm-linux-androideabi-5.1 |  21 +--
 arm/darwin/arm-linux-androideabi-5.2 |  21 +--
 arm/darwin/arm-linux-androideabi-6.0 |  21 +--
 arm/mac-arm-eabi-6.0                 | 311 -----------------------------------
 11 files changed, 110 insertions(+), 410 deletions(-)
 delete mode 100755 arm/mac-arm-eabi-6.0

diff --git a/arm/darwin/arm-eabi-4.8 b/arm/darwin/arm-eabi-4.8
index 2b97e11..7eb0606 100755
--- a/arm/darwin/arm-eabi-4.8
+++ b/arm/darwin/arm-eabi-4.8
@@ -28,7 +28,7 @@ export SET_TARGET_GCC_MAJOR=4;
 export SET_TARGET_GCC_MINOR=8;
 export SET_CLOOG_VERSION=0.18.4;
 export SET_ISL_VERSION=0.15;
-export SET_HOST_BUILD=x86_64-linux-gnu;
+export SET_HOST_BUILD=x86_64-apple-darwin;
 export SET_TARGET=arm-linux-gnueabi;
 export SET_TARGET_GCC=arm-eabi-gcc
 export SET_TARGET_GCC_LIB_PATH="lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod";
@@ -60,7 +60,9 @@ cd $TOOLCHAIN_ROOT_SYMBOLIC/build;
 export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
 
 # Try to parallelize the build for faster performance.
-export JOBS="$(cat /proc/cpuinfo | grep -c processor)";
+CORES=`sysctl -a | grep machdep.cpu | grep core_count | awk '{print $2}'`;
+THREADS=`sysctl -a | grep machdep.cpu | grep thread_count | awk '{print $2}'`;
+JOBS="$((($CORES * $THREADS) / 2))";
 
 # Determine Make flags
 export MAKE_FLAGS=-j"$JOBS";
@@ -102,9 +104,9 @@ export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
 export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
 export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
 export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
-export CLOOG_INSTALLED=$HOST_LIB_PATH/libcloog-isl.so.4;
-export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.so.$TARGET_MPFR_LIB_VERSION;
-export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
+export CLOOG_INSTALLED=$HOST_LIB_PATH/libcloog-isl.4.dylib;
+export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.6.dylib;
+export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.10.dylib;
 
 # Build and install cloog, isl and osl libraries into the toolchain.
 
@@ -112,7 +114,7 @@ export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
 export SET_TARGET_BUILD=CLOOG;
 
 # Make sure ISL is on the right 0.15 branch
-cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm gcc-5 && git checkout FETCH_HEAD;
+cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch github test && git checkout FETCH_HEAD;
 
 # Cloog Build Configuration
 cd $TOOLCHAIN_ROOT_SYMBOLIC/cloog/cloog-$SET_CLOOG_VERSION && ./configure $HOST_PREFIX --with-isl=bundled --with-osl=bundled --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;
@@ -233,8 +235,7 @@ if [ $CLOOG_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALL
 then
 
     # Make a system link for older version of libisl using the newer version for older systems
-    cd $HOST_LIB_PATH && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.10 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.0 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.1 && cd $BUILD_PATH;
-    sleep 5;
+    cd $HOST_LIB_PATH && ln -s libisl.13.dylib libisl.10.dylib && cd $BUILD_PATH;
 
     echo "Preparing sabermod toolchain sources ...";
     echo "";
@@ -245,7 +246,7 @@ then
     cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR && git checkout FETCH_HEAD && cd $BUILD_PATH;
     export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
     export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
-    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
+    cp -vr $SYSROOT_SRC_PATH $SYSROOT_DEST_PATH;
     export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;
 
     # Make sure gcc is on the right remote branch 4.8.x
@@ -258,7 +259,7 @@ then
     export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;
 
     # GCC Build Configuration
-    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static" --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --with-bugurl=mailto:sabermod.team@gmail.com --disable-libquadmath --disable-libatomic --enable-libgomp --enable-libsanitizer --disable-libmudflap --enable-silent-rules;
+    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -lstdc++ -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static" --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --with-bugurl=mailto:sabermod.team@gmail.com --disable-libquadmath --disable-libatomic --enable-libgomp --enable-libsanitizer --disable-libmudflap --enable-silent-rules;
 
     echo "";
     echo "";
diff --git a/arm/darwin/arm-eabi-4.9 b/arm/darwin/arm-eabi-4.9
index 2f664de..3d0962a 100755
--- a/arm/darwin/arm-eabi-4.9
+++ b/arm/darwin/arm-eabi-4.9
@@ -45,7 +45,7 @@ export SET_TARGET_GCC_MAJOR=4;
 export SET_TARGET_GCC_MINOR=9;
 export SET_CLOOG_VERSION=0.18.4;
 export SET_ISL_VERSION=0.15;
-export SET_HOST_BUILD=x86_64-linux-gnu;
+export SET_HOST_BUILD=x86_64-apple-darwin;
 export SET_TARGET=arm-linux-gnueabi;
 export SET_TARGET_GCC=arm-eabi-gcc
 export SET_TARGET_GCC_LIB_PATH="lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod";
@@ -77,7 +77,9 @@ cd $TOOLCHAIN_ROOT_SYMBOLIC/build;
 export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
 
 # Try to parallelize the build for faster performance.
-export JOBS="$(cat /proc/cpuinfo | grep -c processor)";
+CORES=`sysctl -a | grep machdep.cpu | grep core_count | awk '{print $2}'`;
+THREADS=`sysctl -a | grep machdep.cpu | grep thread_count | awk '{print $2}'`;
+JOBS="$((($CORES * $THREADS) / 2))";
 
 # Determine Make flags
 export MAKE_FLAGS=-j"$JOBS";
@@ -119,9 +121,9 @@ export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
 export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
 export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
 export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
-export CLOOG_INSTALLED=$HOST_LIB_PATH/libcloog-isl.so.4;
-export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.so.$TARGET_MPFR_LIB_VERSION;
-export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
+export CLOOG_INSTALLED=$HOST_LIB_PATH/libcloog-isl.4.dylib;
+export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.6.dylib;
+export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.10.dylib;
 
 # Build and install cloog, isl and osl libraries into the toolchain.
 
@@ -129,7 +131,7 @@ export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
 export SET_TARGET_BUILD=CLOOG;
 
 # Make sure ISL is on the right 0.15 branch
-cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm gcc-5 && git checkout FETCH_HEAD;
+cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch github test && git checkout FETCH_HEAD;
 
 # Cloog Build Configuration
 cd $TOOLCHAIN_ROOT_SYMBOLIC/cloog/cloog-$SET_CLOOG_VERSION && ./configure $HOST_PREFIX --with-isl=bundled --with-osl=bundled --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;
@@ -250,8 +252,7 @@ if [ $CLOOG_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALL
 then
 
     # Make a system link for older version of libisl using the newer version for older systems
-    cd $HOST_LIB_PATH && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.10 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.0 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.1 && cd $BUILD_PATH;
-    sleep 5;
+	cd $HOST_LIB_PATH && ln -s libisl.13.dylib libisl.10.dylib && cd $BUILD_PATH;
 
     echo "Preparing sabermod toolchain sources ...";
     echo "";
@@ -262,7 +263,7 @@ then
     cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR && git checkout FETCH_HEAD && cd $BUILD_PATH;
     export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
     export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
-    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
+    cp -vr $SYSROOT_SRC_PATH $SYSROOT_DEST_PATH;
     export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;
 
     # Make sure gcc is on the right remote branch 4.9.x
@@ -275,7 +276,7 @@ then
     export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;
 
     # GCC Build Configuration
-    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static" --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --with-bugurl=mailto:sabermod.team@gmail.com --disable-libquadmath --disable-libatomic --enable-libgomp --enable-libsanitizer --enable-silent-rules;
+    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -lstdc++ -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static" --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --with-bugurl=mailto:sabermod.team@gmail.com --disable-libquadmath --disable-libatomic --enable-libgomp --enable-libsanitizer --enable-silent-rules;
 
     echo "";
     echo "";
diff --git a/arm/darwin/arm-eabi-5.1 b/arm/darwin/arm-eabi-5.1
index 4df929c..6f0705c 100755
--- a/arm/darwin/arm-eabi-5.1
+++ b/arm/darwin/arm-eabi-5.1
@@ -27,7 +27,7 @@ export SET_GCC_VERSION=5.1.1;
 export SET_TARGET_GCC_MAJOR=5;
 export SET_TARGET_GCC_MINOR=1;
 export SET_ISL_VERSION=0.15;
-export SET_HOST_BUILD=x86_64-linux-gnu;
+export SET_HOST_BUILD=x86_64-apple-darwin;
 export SET_TARGET=arm-linux-gnueabi;
 export SET_TARGET_GCC=arm-eabi-gcc;
 export SET_TARGET_GCC_LIB_PATH="lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod";
@@ -59,7 +59,9 @@ cd $TOOLCHAIN_ROOT_SYMBOLIC/build;
 export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
 
 # Try to parallelize the build for faster performance.
-export JOBS="$(cat /proc/cpuinfo | grep -c processor)";
+CORES=`sysctl -a | grep machdep.cpu | grep core_count | awk '{print $2}'`;
+THREADS=`sysctl -a | grep machdep.cpu | grep thread_count | awk '{print $2}'`;
+JOBS="$((($CORES * $THREADS) / 2))";
 
 # Determine Make flags
 export MAKE_FLAGS=-j"$JOBS";
@@ -101,16 +103,16 @@ export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
 export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
 export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
 export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
-export ISL_INSTALLED=$HOST_LIB_PATH/libisl.so.$TARGET_ISL_LIB_VERSION;
-export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.so.$TARGET_MPFR_LIB_VERSION;
-export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
+export ISL_INSTALLED=$HOST_LIB_PATH/libisl.13.dylib;
+export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.6.dylib;
+export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.10.dylib;
 
 # ISL
 
 export SET_TARGET_BUILD=ISL;
 
 # Build and install isl into the toolchain.
-cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm gcc-5 && git checkout FETCH_HEAD;
+cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch github test && git checkout FETCH_HEAD;
 
 # ISL Build Configuration
 ./configure $HOST_PREFIX --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;
@@ -227,8 +229,7 @@ if [ $ISL_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALLED
 then
 
     # Make a system link for older version of libisl using the newer version for older systems
-    cd $HOST_LIB_PATH && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.10 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.0 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.1 && cd $BUILD_PATH;
-    sleep 5;
+    cd $HOST_LIB_PATH && ln -s libisl.13.dylib libisl.10.dylib && cd $BUILD_PATH;
 
     echo "Preparing sabermod toolchain sources ...";
     echo "";
@@ -239,7 +240,7 @@ then
     cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-5.0 && git checkout FETCH_HEAD && cd $BUILD_PATH;
     export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
     export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
-    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
+    cp -vr $SYSROOT_SRC_PATH $SYSROOT_DEST_PATH;
     export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;
 
     # Make sure gcc is on the right remote branch 5.1.x
@@ -252,7 +253,7 @@ then
     export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;
 
     # GCC Build Configuration
-    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static" --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --with-bugurl=mailto:sabermod.team@gmail.com --disable-libquadmath --disable-libatomic --enable-libgomp --enable-libsanitizer --enable-silent-rules;
+    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -lstdc++ -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static" --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --with-bugurl=mailto:sabermod.team@gmail.com --disable-libquadmath --disable-libatomic --enable-libgomp --enable-libsanitizer --enable-silent-rules;
 
     echo "";
     echo "";
diff --git a/arm/darwin/arm-eabi-5.2 b/arm/darwin/arm-eabi-5.2
index e8a08f9..76bd044 100755
--- a/arm/darwin/arm-eabi-5.2
+++ b/arm/darwin/arm-eabi-5.2
@@ -59,7 +59,9 @@ cd $TOOLCHAIN_ROOT_SYMBOLIC/build;
 export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
 
 # Try to parallelize the build for faster performance.
-export JOBS="$(cat /proc/cpuinfo | grep -c processor)";
+CORES=`sysctl -a | grep machdep.cpu | grep core_count | awk '{print $2}'`;
+THREADS=`sysctl -a | grep machdep.cpu | grep thread_count | awk '{print $2}'`;
+JOBS="$((($CORES * $THREADS) / 2))";
 
 # Determine Make flags
 export MAKE_FLAGS=-j"$JOBS";
@@ -101,16 +103,16 @@ export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
 export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
 export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
 export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
-export ISL_INSTALLED=$HOST_LIB_PATH/libisl.so.$TARGET_ISL_LIB_VERSION;
-export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.so.$TARGET_MPFR_LIB_VERSION;
-export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
+export ISL_INSTALLED=$HOST_LIB_PATH/libisl.13.dylib;
+export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.6.dylib;
+export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.10.dylib;
 
 # ISL
 
 export SET_TARGET_BUILD=ISL;
 
 # Build and install isl into the toolchain.
-cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm gcc-5 && git checkout FETCH_HEAD;
+cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch github test && git checkout FETCH_HEAD;
 
 # ISL Build Configuration
 ./configure $HOST_PREFIX --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;
@@ -227,8 +229,7 @@ if [ $ISL_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALLED
 then
 
     # Make a system link for older version of libisl using the newer version for older systems
-    cd $HOST_LIB_PATH && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.10 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.0 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.1 && cd $BUILD_PATH;
-    sleep 5;
+    cd $HOST_LIB_PATH && ln -s libisl.13.dylib libisl.10.dylib && cd $BUILD_PATH;
 
     echo "Preparing sabermod toolchain sources ...";
     echo "";
@@ -239,7 +240,7 @@ then
     cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-5.0 && git checkout FETCH_HEAD && cd $BUILD_PATH;
     export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
     export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
-    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
+    cp -vr $SYSROOT_SRC_PATH $SYSROOT_DEST_PATH;
     export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;
 
     # Make sure gcc is on the right remote branch 5.2.x
@@ -252,7 +253,7 @@ then
     export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;
 
     # GCC Build Configuration
-    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static" --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --with-bugurl=mailto:sabermod.team@gmail.com --disable-libquadmath --disable-libatomic --enable-libgomp --enable-libsanitizer --enable-silent-rules;
+    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -lstdc++ -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static" --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --with-bugurl=mailto:sabermod.team@gmail.com --disable-libquadmath --disable-libatomic --enable-libgomp --enable-libsanitizer --enable-silent-rules;
 
     echo "";
     echo "";
diff --git a/arm/darwin/arm-eabi-6.0 b/arm/darwin/arm-eabi-6.0
index c03b808..901abad 100755
--- a/arm/darwin/arm-eabi-6.0
+++ b/arm/darwin/arm-eabi-6.0
@@ -27,7 +27,7 @@ export SET_GCC_VERSION=6.0.0;
 export SET_TARGET_GCC_MAJOR=6;
 export SET_TARGET_GCC_MINOR=0;
 export SET_ISL_VERSION=0.15;
-export SET_HOST_BUILD=x86_64-linux-gnu;
+export SET_HOST_BUILD=x86_64-apple-darwin;
 export SET_TARGET=arm-linux-gnueabi;
 export SET_TARGET_GCC=arm-eabi-gcc;
 export SET_TARGET_GCC_LIB_PATH="lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod";
@@ -59,7 +59,9 @@ cd $TOOLCHAIN_ROOT_SYMBOLIC/build;
 export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
 
 # Try to parallelize the build for faster performance.
-export JOBS="$(cat /proc/cpuinfo | grep -c processor)";
+CORES=`sysctl -a | grep machdep.cpu | grep core_count | awk '{print $2}'`;
+THREADS=`sysctl -a | grep machdep.cpu | grep thread_count | awk '{print $2}'`;
+JOBS="$((($CORES * $THREADS) / 2))";
 
 # Determine Make flags
 export MAKE_FLAGS=-j"$JOBS";
@@ -101,16 +103,16 @@ export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
 export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
 export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
 export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
-export ISL_INSTALLED=$HOST_LIB_PATH/libisl.so.$TARGET_ISL_LIB_VERSION;
-export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.so.$TARGET_MPFR_LIB_VERSION;
-export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
+export ISL_INSTALLED=$HOST_LIB_PATH/libisl.13.dylib;
+export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.6.dylib;
+export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.10.dylib;
 
 # ISL
 
 export SET_TARGET_BUILD=ISL;
 
 # Build and install isl into the toolchain.
-cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm master && git checkout FETCH_HEAD;
+cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch github test && git checkout FETCH_HEAD;
 
 # ISL Build Configuration
 ./configure $HOST_PREFIX --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;
@@ -227,8 +229,7 @@ if [ $ISL_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALLED
 then
 
     # Make a system link for older version of libisl using the newer version for older systems
-    cd $HOST_LIB_PATH && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.10 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.0 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.1 && cd $BUILD_PATH;
-    sleep 5;
+    cd $HOST_LIB_PATH && ln -s libisl.13.dylib libisl.10.dylib && cd $BUILD_PATH;
 
     echo "Preparing sabermod toolchain sources ...";
     echo "";
@@ -239,7 +240,7 @@ then
     cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-5.0 && git checkout FETCH_HEAD && cd $BUILD_PATH;
     export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
     export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
-    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
+    cp -vr $SYSROOT_SRC_PATH $SYSROOT_DEST_PATH;
     export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;
 
     # Make sure gcc is on the right remote branch 6.0.x
@@ -252,7 +253,7 @@ then
     export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;
 
     # GCC Build Configuration
-    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static" --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --with-bugurl=mailto:sabermod.team@gmail.com --disable-libquadmath --disable-libatomic --enable-libgomp --enable-libsanitizer --enable-silent-rules;
+    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -lstdc++ -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static" --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --with-bugurl=mailto:sabermod.team@gmail.com --disable-libquadmath --disable-libatomic --enable-libgomp --enable-libsanitizer --enable-silent-rules;
 
     echo "";
     echo "";
@@ -306,4 +307,4 @@ unset SET_TARGET_GCC;
 unset LD_LIBRARY_PATH;
 unset C_INCLUDE_PATH;
 unset gcc_cv_use_emutls;
-unset libgomp_cv_have_attribute_visibility;
+unset libgomp_cv_have_attribute_visibility;
\ No newline at end of file
diff --git a/arm/darwin/arm-linux-androideabi-4.8 b/arm/darwin/arm-linux-androideabi-4.8
index 4dbd0a6..9600a74 100755
--- a/arm/darwin/arm-linux-androideabi-4.8
+++ b/arm/darwin/arm-linux-androideabi-4.8
@@ -28,7 +28,7 @@ export SET_TARGET_GCC_MAJOR=4;
 export SET_TARGET_GCC_MINOR=8;
 export SET_CLOOG_VERSION=0.18.4;
 export SET_ISL_VERSION=0.15;
-export SET_HOST_BUILD=x86_64-linux-gnu;
+export SET_HOST_BUILD=x86_64-apple-darwin;
 export SET_TARGET=arm-linux-androideabi;
 export SET_TARGET_GCC_LIB_PATH="lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod";
 export TARGET_ISL_LIB_VERSION=15.0.0;
@@ -59,7 +59,9 @@ cd $TOOLCHAIN_ROOT_SYMBOLIC/build;
 export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
 
 # Try to parallelize the build for faster performance.
-export JOBS="$(cat /proc/cpuinfo | grep -c processor)";
+CORES=`sysctl -a | grep machdep.cpu | grep core_count | awk '{print $2}'`;
+THREADS=`sysctl -a | grep machdep.cpu | grep thread_count | awk '{print $2}'`;
+JOBS="$((($CORES * $THREADS) / 2))";
 
 # Determine Make flags
 export MAKE_FLAGS=-j"$JOBS";
@@ -101,9 +103,9 @@ export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
 export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
 export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
 export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
-export CLOOG_INSTALLED=$HOST_LIB_PATH/libcloog-isl.so.4;
-export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.so.$TARGET_MPFR_LIB_VERSION;
-export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
+export CLOOG_INSTALLED=$HOST_LIB_PATH/libcloog-isl.4.dylib;
+export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.6.dylib;
+export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.10.dylib;
 
 # Build and install cloog, isl and osl libraries into the toolchain.
 
@@ -111,7 +113,7 @@ export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
 export SET_TARGET_BUILD=CLOOG;
 
 # Make sure ISL is on the right 0.15 branch
-cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm gcc-5 && git checkout FETCH_HEAD;
+cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch github test && git checkout FETCH_HEAD;
 
 # Cloog Build Configuration
 cd $TOOLCHAIN_ROOT_SYMBOLIC/cloog/cloog-$SET_CLOOG_VERSION && ./configure $HOST_PREFIX --with-isl=bundled --with-osl=bundled --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;
@@ -232,8 +234,7 @@ if [ $CLOOG_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALL
 then
 
     # Make a system link for older version of libisl using the newer version for older systems
-    cd $HOST_LIB_PATH && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.10 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.0 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.1 && cd $BUILD_PATH;
-    sleep 5;
+    cd $HOST_LIB_PATH && ln -s libisl.13.dylib libisl.10.dylib && cd $BUILD_PATH;
 
     echo "Preparing sabermod toolchain sources ...";
     echo "";
@@ -244,7 +245,7 @@ then
     cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR && git checkout FETCH_HEAD && cd $BUILD_PATH;
     export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
     export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
-    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
+    cp -vr $SYSROOT_SRC_PATH $SYSROOT_DEST_PATH;
     export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;
 
     # Make sure gcc is on the right remote branch 4.8.x
@@ -257,7 +258,7 @@ then
     export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;
 
     # GCC Build Configuration
-    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-linux-androideabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --with-gold-version=android --enable-gold=default --enable-plugins --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' "--enable-eh-frame-hdr-for-static" --enable-initfini-array --disable-bootstrap --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --enable-libsanitizer --with-bugurl=mailto:sabermod.team@gmail.com --enable-silent-rules;
+    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-linux-androideabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --with-gold-version=android --enable-gold=default --enable-plugins --disable-option-checking --with-host-libstdcxx='-static-libgcc -lstdc++ -lm' "--enable-eh-frame-hdr-for-static" --enable-initfini-array --disable-bootstrap --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --enable-libsanitizer --with-bugurl=mailto:sabermod.team@gmail.com --enable-silent-rules;
 
     echo "";
     echo "";
diff --git a/arm/darwin/arm-linux-androideabi-4.9 b/arm/darwin/arm-linux-androideabi-4.9
index 83b03be..0f164e1 100755
--- a/arm/darwin/arm-linux-androideabi-4.9
+++ b/arm/darwin/arm-linux-androideabi-4.9
@@ -45,7 +45,7 @@ export SET_TARGET_GCC_MAJOR=4;
 export SET_TARGET_GCC_MINOR=9;
 export SET_CLOOG_VERSION=0.18.4;
 export SET_ISL_VERSION=0.15;
-export SET_HOST_BUILD=x86_64-linux-gnu;
+export SET_HOST_BUILD=x86_64-apple-darwin;
 export SET_TARGET=arm-linux-androideabi;
 export SET_TARGET_GCC_LIB_PATH="lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod";
 export TARGET_ISL_LIB_VERSION=15.0.0;
@@ -76,7 +76,9 @@ cd $TOOLCHAIN_ROOT_SYMBOLIC/build;
 export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
 
 # Try to parallelize the build for faster performance.
-export JOBS="$(cat /proc/cpuinfo | grep -c processor)";
+CORES=`sysctl -a | grep machdep.cpu | grep core_count | awk '{print $2}'`;
+THREADS=`sysctl -a | grep machdep.cpu | grep thread_count | awk '{print $2}'`;
+JOBS="$((($CORES * $THREADS) / 2))";
 
 # Determine Make flags
 export MAKE_FLAGS=-j"$JOBS";
@@ -118,9 +120,9 @@ export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
 export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
 export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
 export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
-export CLOOG_INSTALLED=$HOST_LIB_PATH/libcloog-isl.so.4;
-export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.so.$TARGET_MPFR_LIB_VERSION;
-export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
+export CLOOG_INSTALLED=$HOST_LIB_PATH/libcloog-isl.4.dylib;
+export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.6.dylib;
+export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.10.dylib;
 
 # Build and install cloog, isl and osl libraries into the toolchain.
 
@@ -128,7 +130,7 @@ export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
 export SET_TARGET_BUILD=CLOOG;
 
 # Make sure ISL is on the right 0.15 branch
-cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm gcc-5 && git checkout FETCH_HEAD;
+cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch github test && git checkout FETCH_HEAD;
 
 # Cloog Build Configuration
 cd $TOOLCHAIN_ROOT_SYMBOLIC/cloog/cloog-$SET_CLOOG_VERSION && ./configure $HOST_PREFIX --with-isl=bundled --with-osl=bundled --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;
@@ -249,7 +251,7 @@ if [ $CLOOG_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALL
 then
 
     # Make a system link for older version of libisl using the newer version for older systems
-    cd $HOST_LIB_PATH && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.10 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.0 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.1 && cd $BUILD_PATH;
+    cd $HOST_LIB_PATH && ln -s libisl.13.dylib libisl.10.dylib && cd $BUILD_PATH;
     sleep 5;
 
     echo "Preparing sabermod toolchain sources ...";
@@ -261,7 +263,7 @@ then
     cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR && git checkout FETCH_HEAD && cd $BUILD_PATH;
     export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
     export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
-    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
+    cp -vr $SYSROOT_SRC_PATH $SYSROOT_DEST_PATH;
     export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;
 
     # Make sure gcc is on the right remote branch 4.9.x
@@ -274,7 +276,7 @@ then
     export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;
 
     # GCC Build Configuration
-    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-linux-androideabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --with-gold-version=android --enable-gold=default --enable-plugins --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' "--enable-eh-frame-hdr-for-static" --enable-initfini-array --disable-bootstrap --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --enable-libsanitizer --with-bugurl=mailto:sabermod.team@gmail.com --enable-silent-rules --enable-libgomp;
+    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-linux-androideabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --with-gold-version=android --enable-gold=default --enable-plugins --disable-option-checking --with-host-libstdcxx='-static-libgcc -lstdc++ -lm' "--enable-eh-frame-hdr-for-static" --enable-initfini-array --disable-bootstrap --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --enable-libsanitizer --with-bugurl=mailto:sabermod.team@gmail.com --enable-silent-rules --enable-libgomp;
 
     echo "";
     echo "";
diff --git a/arm/darwin/arm-linux-androideabi-5.1 b/arm/darwin/arm-linux-androideabi-5.1
index 25b4975..4e61810 100755
--- a/arm/darwin/arm-linux-androideabi-5.1
+++ b/arm/darwin/arm-linux-androideabi-5.1
@@ -27,7 +27,7 @@ export SET_GCC_VERSION=5.1.1;
 export SET_TARGET_GCC_MAJOR=5;
 export SET_TARGET_GCC_MINOR=1;
 export SET_ISL_VERSION=0.15;
-export SET_HOST_BUILD=x86_64-linux-gnu;
+export SET_HOST_BUILD=x86_64-apple-darwin;
 export SET_TARGET=arm-linux-androideabi;
 export SET_TARGET_GCC_LIB_PATH="lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod";
 export TARGET_ISL_LIB_VERSION=15.0.0;
@@ -58,7 +58,9 @@ cd $TOOLCHAIN_ROOT_SYMBOLIC/build;
 export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
 
 # Try to parallelize the build for faster performance.
-export JOBS="$(cat /proc/cpuinfo | grep -c processor)";
+CORES=`sysctl -a | grep machdep.cpu | grep core_count | awk '{print $2}'`;
+THREADS=`sysctl -a | grep machdep.cpu | grep thread_count | awk '{print $2}'`;
+JOBS="$((($CORES * $THREADS) / 2))";
 
 # Determine Make flags
 export MAKE_FLAGS=-j"$JOBS";
@@ -100,16 +102,16 @@ export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
 export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
 export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
 export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
-export ISL_INSTALLED=$HOST_LIB_PATH/libisl.so.$TARGET_ISL_LIB_VERSION;
-export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.so.$TARGET_MPFR_LIB_VERSION;
-export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
+export ISL_INSTALLED=$HOST_LIB_PATH/libisl.13.dylib;
+export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.6.dylib;
+export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.10.dylib;
 
 # ISL
 
 export SET_TARGET_BUILD=ISL;
 
 # Build and install isl into the toolchain.
-cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm gcc-5 && git checkout FETCH_HEAD;;
+cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch github test && git checkout FETCH_HEAD;
 
 # ISL Build Configuration
 ./configure $HOST_PREFIX --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;
@@ -226,8 +228,7 @@ if [ $ISL_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALLED
 then
 
     # Make a system link for older version of libisl using the newer version for older systems
-    cd $HOST_LIB_PATH && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.10 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.0 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.1 && cd $BUILD_PATH;
-    sleep 5;
+    cd $HOST_LIB_PATH && ln -s libisl.13.dylib libisl.10.dylib && cd $BUILD_PATH;
 
     echo "Preparing sabermod toolchain sources ...";
     echo "";
@@ -238,7 +239,7 @@ then
     cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-5.0 && git checkout FETCH_HEAD && cd $BUILD_PATH;
     export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
     export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
-    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
+    cp -vr $SYSROOT_SRC_PATH $SYSROOT_DEST_PATH;
     export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;
 
     # Make sure gcc is on the right remote branch 5.1.x
@@ -251,7 +252,7 @@ then
     export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;
 
     # GCC Build Configuration
-    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-linux-androideabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --with-gold-version=android --enable-gold=default --enable-plugins --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' "--enable-eh-frame-hdr-for-static" --enable-initfini-array --disable-bootstrap --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --enable-libsanitizer --with-bugurl=mailto:sabermod.team@gmail.com --enable-silent-rules;
+    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-linux-androideabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --with-gold-version=android --enable-gold=default --enable-plugins --disable-option-checking --with-host-libstdcxx='-static-libgcc -lstdc++ -lm' "--enable-eh-frame-hdr-for-static" --enable-initfini-array --disable-bootstrap --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --enable-libsanitizer --with-bugurl=mailto:sabermod.team@gmail.com --enable-silent-rules;
 
     echo "";
     echo "";
diff --git a/arm/darwin/arm-linux-androideabi-5.2 b/arm/darwin/arm-linux-androideabi-5.2
index a7ce55e..77e8da5 100755
--- a/arm/darwin/arm-linux-androideabi-5.2
+++ b/arm/darwin/arm-linux-androideabi-5.2
@@ -27,7 +27,7 @@ export SET_GCC_VERSION=5.2.0;
 export SET_TARGET_GCC_MAJOR=5;
 export SET_TARGET_GCC_MINOR=2;
 export SET_ISL_VERSION=0.15;
-export SET_HOST_BUILD=x86_64-linux-gnu;
+export SET_HOST_BUILD=x86_64-apple-darwin;
 export SET_TARGET=arm-linux-androideabi;
 export SET_TARGET_GCC_LIB_PATH="lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod";
 export TARGET_ISL_LIB_VERSION=15.0.0;
@@ -58,7 +58,9 @@ cd $TOOLCHAIN_ROOT_SYMBOLIC/build;
 export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
 
 # Try to parallelize the build for faster performance.
-export JOBS="$(cat /proc/cpuinfo | grep -c processor)";
+CORES=`sysctl -a | grep machdep.cpu | grep core_count | awk '{print $2}'`;
+THREADS=`sysctl -a | grep machdep.cpu | grep thread_count | awk '{print $2}'`;
+JOBS="$((($CORES * $THREADS) / 2))";
 
 # Determine Make flags
 export MAKE_FLAGS=-j"$JOBS";
@@ -100,16 +102,16 @@ export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
 export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
 export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
 export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
-export ISL_INSTALLED=$HOST_LIB_PATH/libisl.so.$TARGET_ISL_LIB_VERSION;
-export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.so.$TARGET_MPFR_LIB_VERSION;
-export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
+export ISL_INSTALLED=$HOST_LIB_PATH/libisl.13.dylib;
+export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.6.dylib;
+export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.10.dylib;
 
 # ISL
 
 export SET_TARGET_BUILD=ISL;
 
 # Build and install isl into the toolchain.
-cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm gcc-5 && git checkout FETCH_HEAD;
+cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch github test && git checkout FETCH_HEAD;
 
 # ISL Build Configuration
 ./configure $HOST_PREFIX --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;
@@ -226,8 +228,7 @@ if [ $ISL_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALLED
 then
 
     # Make a system link for older version of libisl using the newer version for older systems
-    cd $HOST_LIB_PATH && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.10 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.0 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.1 && cd $BUILD_PATH;
-    sleep 5;
+    cd $HOST_LIB_PATH && ln -s libisl.13.dylib libisl.10.dylib && cd $BUILD_PATH;
 
     echo "Preparing sabermod toolchain sources ...";
     echo "";
@@ -238,7 +239,7 @@ then
     cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-5.0 && git checkout FETCH_HEAD && cd $BUILD_PATH;
     export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
     export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
-    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
+    cp -vr $SYSROOT_SRC_PATH $SYSROOT_DEST_PATH;
     export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;
 
     # Make sure gcc is on the right remote branch 5.2.x
@@ -251,7 +252,7 @@ then
     export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;
 
     # GCC Build Configuration
-    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-linux-androideabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --with-gold-version=android --enable-gold=default --enable-plugins --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' "--enable-eh-frame-hdr-for-static" --enable-initfini-array --disable-bootstrap --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --enable-libsanitizer --with-bugurl=mailto:sabermod.team@gmail.com --enable-silent-rules;
+    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-linux-androideabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --with-gold-version=android --enable-gold=default --enable-plugins --disable-option-checking --with-host-libstdcxx='-static-libgcc -lstdc++ -lm' "--enable-eh-frame-hdr-for-static" --enable-initfini-array --disable-bootstrap --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --enable-libsanitizer --with-bugurl=mailto:sabermod.team@gmail.com --enable-silent-rules;
 
     echo "";
     echo "";
diff --git a/arm/darwin/arm-linux-androideabi-6.0 b/arm/darwin/arm-linux-androideabi-6.0
index d7a9eb4..e48635e 100755
--- a/arm/darwin/arm-linux-androideabi-6.0
+++ b/arm/darwin/arm-linux-androideabi-6.0
@@ -27,7 +27,7 @@ export SET_GCC_VERSION=6.0.0;
 export SET_TARGET_GCC_MAJOR=6;
 export SET_TARGET_GCC_MINOR=0;
 export SET_ISL_VERSION=0.15;
-export SET_HOST_BUILD=x86_64-linux-gnu;
+export SET_HOST_BUILD=x86_64-apple-darwin;
 export SET_TARGET=arm-linux-androideabi;
 export SET_TARGET_GCC_LIB_PATH="lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod";
 export TARGET_ISL_LIB_VERSION=15.0.0;
@@ -58,7 +58,9 @@ cd $TOOLCHAIN_ROOT_SYMBOLIC/build;
 export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
 
 # Try to parallelize the build for faster performance.
-export JOBS="$(cat /proc/cpuinfo | grep -c processor)";
+CORES=`sysctl -a | grep machdep.cpu | grep core_count | awk '{print $2}'`;
+THREADS=`sysctl -a | grep machdep.cpu | grep thread_count | awk '{print $2}'`;
+JOBS="$((($CORES * $THREADS) / 2))";
 
 # Determine Make flags
 export MAKE_FLAGS=-j"$JOBS";
@@ -100,16 +102,16 @@ export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
 export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
 export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
 export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
-export ISL_INSTALLED=$HOST_LIB_PATH/libisl.so.$TARGET_ISL_LIB_VERSION;
-export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.so.$TARGET_MPFR_LIB_VERSION;
-export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.so.$TARGET_GMP_LIB_VERSION;
+export ISL_INSTALLED=$HOST_LIB_PATH/libisl.13.dylib;
+export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.6.dylib;
+export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.10.dylib;
 
 # ISL
 
 export SET_TARGET_BUILD=ISL;
 
 # Build and install isl into the toolchain.
-cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm master && git checkout FETCH_HEAD;
+cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch github test && git checkout FETCH_HEAD;
 
 # ISL Build Configuration
 ./configure $HOST_PREFIX --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;
@@ -226,8 +228,7 @@ if [ $ISL_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALLED
 then
 
     # Make a system link for older version of libisl using the newer version for older systems
-    cd $HOST_LIB_PATH && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.10 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.0 && ln -s libisl.so.$TARGET_ISL_LIB_VERSION libisl.so.13.1.1 && cd $BUILD_PATH;
-    sleep 5;
+    cd $HOST_LIB_PATH && ln -s libisl.13.dylib libisl.10.dylib && cd $BUILD_PATH;
 
     echo "Preparing sabermod toolchain sources ...";
     echo "";
@@ -238,7 +239,7 @@ then
     cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-5.0 && git checkout FETCH_HEAD && cd $BUILD_PATH;
     export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
     export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
-    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
+    cp -vr $SYSROOT_SRC_PATH $SYSROOT_DEST_PATH;
     export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;
 
     # Make sure gcc is on the right remote branch 6.0.x
@@ -251,7 +252,7 @@ then
     export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;
 
     # GCC Build Configuration
-    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-linux-androideabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --with-gold-version=android --enable-gold=default --enable-plugins --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' "--enable-eh-frame-hdr-for-static" --enable-initfini-array --disable-bootstrap --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --enable-libsanitizer --with-bugurl=mailto:sabermod.team@gmail.com --enable-silent-rules;
+    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-linux-androideabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=android --with-mpc-version=gnu --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --with-gold-version=android --enable-gold=default --enable-plugins --disable-option-checking --with-host-libstdcxx='-static-libgcc -lstdc++ -lm' "--enable-eh-frame-hdr-for-static" --enable-initfini-array --disable-bootstrap --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --enable-libsanitizer --with-bugurl=mailto:sabermod.team@gmail.com --enable-silent-rules;
 
     echo "";
     echo "";
-- 
2.3.2 (Apple Git-55)

