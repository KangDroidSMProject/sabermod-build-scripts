#!/bin/bash

# Copyright (C) 2013-2015 The SaberMod Project

#Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

###########################################################################
###########################################################################
#####
#####  C O N F I G U R A T I O N
#####
###########################################################################
###########################################################################

# Some predefined configurations
export SET_TARGET_GCC_VERSION=5.0.0;
export SET_TARGET_GCC_MAJOR=5;
export SET_TARGET_GCC_MINOR=0;
export SET_SYSTEM_GCC_VERSION=4.9.1;
export SET_ISL_VERSION=0.14;
export SET_HOST_BUILD=x86_64-linux-gnu;
export SET_TARGET=x86_64-linux-gnu;
export SET_BUILD_TYPE=kernel;
export SET_TARGET_GCC_LIB_PATH="lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod";
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01';
export SABERMOD_BUILD_ARCH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

# Attempt to speed up compilation by linking everything to /tmp filesystem
# Also find toolchain root
if [ -e /tmp/sm-tc ];
then
    rm -rf /tmp/sm-tc;
fi;
cd ../../;
export TOOLCHAIN_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
cd /tmp && ln -s $TOOLCHAIN_ROOT /tmp/sm-tc && cd /tmp/sm-tc;

export TOOLCHAIN_ROOT_SYMBOLIC="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

cd $TOOLCHAIN_ROOT_SYMBOLIC/build;

# Build PATH
export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

# Try to parallelize the build for faster performance.
export JOBS="$(cat /proc/cpuinfo | grep -c processor)";

# Determine Make flags
export MAKE_FLAGS=-j"$JOBS";

# Set log location
export MAKE_LOG=$BUILD_PATH/$SET_TARGET-$SET_TARGET_GCC_MAJOR-$SET_TARGET_GCC_MINOR-$SET_BUILD_TYPE.log;

# Make a clean build
if [ -e Makefile ];
then
    make $MAKE_FLAGS clean;
    make $MAKE_FLAGS distclean;
fi;

# untracked files
if [ -d gmp-gnu ];
then
    rm -rf gmp-gnu;
fi;

export TOOLCHAIN_PREFIX_PATH=~/tmp/$SET_TARGET-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR-$SET_BUILD_TYPE;

if [ -d "$TOOLCHAIN_PREFIX_PATH" ];
then
    rm -rf $TOOLCHAIN_PREFIX_PATH;
    mkdir -p $TOOLCHAIN_PREFIX_PATH;
else
    mkdir -p $TOOLCHAIN_PREFIX_PATH;
fi;

# Build and install isl into the toolchain.

# ISL
export ISL_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH/isl;
mkdir $ISL_PREFIX_PATH;
export ISL_PREFIX=--prefix=$ISL_PREFIX_PATH;

# Make sure ISL is on the right gcc5 branch
cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm gcc5 && git checkout FETCH_HEAD;

# ISL Build Configuration
./configure $ISL_PREFIX --with-gmp=system --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET;

echo "";
echo "";
echo "";
echo "Compiling ISL ...";
echo "";
echo "";
echo "";

make $MAKE_FLAGS -k > $MAKE_LOG 2>&1;
make install -k >> $MAKE_LOG 2>&1;

# cleanup
make $MAKE_FLAGS clean -k >> $MAKE_LOG 2>&1;
make $MAKE_FLAGS distclean -k >> $MAKE_LOG 2>&1;

# untracked files
rm -rf gitversion.h include/isl/stdint.h isl-uninstalled.pc isl-uninstalled.sh isl.pc isl.pc.in;

git reset --hard;

export ISL_LIB_PATH=$ISL_PREFIX_PATH/lib;
export ISL_INSTALLED=$ISL_LIB_PATH/libisl.so.13.1.0;
export SET_TARGET_BUILD=ISL;

cd $BUILD_PATH;

# Did we make it?
if [ -e $ISL_INSTALLED ];
then

    # Make a system link for older version of libisl using the newer version for older systems
    cd $ISL_LIB_PATH && ln -s libisl.so.13.1.0 libisl.so.10 && cd $BUILD_PATH;
    ./build-success;
    sleep 5;

    echo "Preparing sabermod toolchain sources ...";
    echo "";
    echo "";
    echo "";

    # Make sure gcc is on the right remote branch 5.0.x
    # Remove all and git reset --hard so there's no conflicts between branches
    cd "$TOOLCHAIN_ROOT_SYMBOLIC/gcc/gcc-SaberMod" && rm -rf * && git reset --hard && git fetch sm $SET_TARGET_GCC_VERSION && git checkout FETCH_HEAD && cd $BUILD_PATH;

    # make libs available for ld
    export LD_LIBRARY_PATH=$ISL_LIB_PATH:/usr/aarch64-linux-gnu/lib;

    export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;

    # GCC Build Configuration
    ./configure $TOOLCHAIN_PREFIX --with-sysroot=/ --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&x86_64-linux-&' --with-gcc-version=SaberMod --with-binutils-version=gnu --with-gmp-version=gnu --with-mpfr-version=gnu --with-gdb-version=gnu --with-mpc-version=gnu --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-ld=default --disable-gold --enable-plugins --disable-option-checking --disable-bootstrap --disable-libmudflap --disable-libquadmath --disable-libsanitizer --enable-initfini-array "--enable-eh-frame-hdr-for-static" --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --with-gxx-include-dir=/usr/aarch64-linux-gnu/include/c++/$SET_SYSTEM_GCC_VERSION --enable-multilib --with-libexpat --with-python --with-gnu-ld --with-gnu-as --disable-werror --with-bugurl=mailto:sabermod.team@gmail.com --disable-libsanitizer --disable-libgomp --disable-libatomic --disable-libstdcxx;

    echo "";
    echo "";
    echo "";
    echo "Compiling sabermod toolchain $SET_TARGET-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR-$SET_BUILD_TYPE ...";

    # Build the toolchain
    make $MAKE_FLAGS -k >> $MAKE_LOG 2>&1;

    # Install the toolchain (twice)
    make install -k >> $MAKE_LOG 2>&1 && make install -k >> $MAKE_LOG 2>&1;

    export SET_TARGET_BUILD=GCC;
    export GCC_INSTALLED=$TOOLCHAIN_PREFIX_PATH/bin/$SET_TARGET-gcc;

    # Did we make it?
    if [ -e $GCC_INSTALLED ];
    then
        ./build-success;

        # Copy prebuilts
        cp $TOOLCHAIN_ROOT_SYMBOLIC/smbuild/.gitignore $TOOLCHAIN_PREFIX_PATH/.gitignore;
        cp -R $ISL_LIB_PATH/* $TOOLCHAIN_PREFIX_PATH/$SET_TARGET_GCC_LIB_PATH;
        rm -rf $ISL_PREFIX_PATH;
    else
        ./build-failed;
    fi;
else
    ./build-failed;
fi;

cd $SABERMOD_BUILD_ARCH;

