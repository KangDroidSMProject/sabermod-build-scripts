#!/bin/bash

# Copyright (C) 2013-2015 The SaberMod Project

#Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# red = errors, cyan = warnings, green = confirmations, blue = informational
# plain for generic text, bold for titles, reset flag at each end of line
# plain blue should not be used for readability reasons - use plain cyan instead
export CLR_RST=$(tput sgr0)                        ## reset flag
export CLR_RED=$CLR_RST$(tput setaf 1)             #  red, plain
export CLR_GRN=$CLR_RST$(tput setaf 2)             #  green, plain
export CLR_BLU=$CLR_RST$(tput setaf 4)             #  blue, plain
export CLR_CYA=$CLR_RST$(tput setaf 6)             #  cyan, plain
export CLR_BLD=$(tput bold)                        ## bold flag
export CLR_BLD_RED=$CLR_RST$CLR_BLD$(tput setaf 1) #  red, bold
export CLR_BLD_GRN=$CLR_RST$CLR_BLD$(tput setaf 2) #  green, bold
export CLR_BLD_BLU=$CLR_RST$CLR_BLD$(tput setaf 4) #  blue, bold
export CLR_BLD_CYA=$CLR_RST$CLR_BLD$(tput setaf 6) #  cyan, bold

# Output usage help
function showHelpAndExit {
        echo -e "${CLR_BLD_BLU}usage: $0 <cortex(a7)(a9)(a15)> <neon(vfpv4)>${CLR_RST}";
        echo -e "";
        echo -e "${CLR_BLD_BLU}options:${CLR_RST}";
        echo -e "${CLR_BLD_BLU}  -h, --help     display this help message${CLR_RST}";
        exit 1;
}

# Check twice to see if CORTEX is already defined.
if [ ! "$CORTEX" ];
then
    
    # Grab any help or cortex command-line instructions
    export CORTEX=$1;
    shift;
fi;


if [ ! "$CORTEX" ];
then
    unset CORTEX_FLAGS;
fi;

if [ "$CORTEX" ];
then
    case $CORTEX in
    -h|--help|h|help)
            showHelpAndExit;
            ;;
    a7)
            export CORTEX_FLAGS="--with-tune=cortex-a7";
            ;;
    a9)
            export CORTEX_FLAGS="--with-tune=cortex-a9";
            ;;
    a15)
            export CORTEX_FLAGS="--with-tune=cortex-a15";
            ;;
    esac
fi;

# Check twice to see if NEON is already defined.
if [ ! "$NEON" ];
then
    
    # Grab any neon command-line instructions
    export NEON=$1;
    shift
fi;


if [ ! "$NEON" ];
then
    export NEON_FLAGS="--with-fpu=neon";
fi

if [ "$NEON" ];
then
    case $NEON in
    vfpv4)
            export NEON_FLAGS="--with-fpu=neon-vfpv4";
            ;;
    esac
fi;

# Ask for GCC Version to build
echo -e "Which 4.9 base of gcc would you like to build?";

while read -p "${CLR_BLD}google${CLR_RST} or ${CLR_BLD}gnu${CLR_RST}? " cchoice
do
case "$cchoice" in
        google )
                export VER=4.9.x
                break
                ;;
        gnu )
                export VER=4.9.4
                break
                ;;
esac
done

# Some predefined configurations
export SET_GCC_VERSION=$VER;
export SET_TARGET_GCC_MAJOR=4;
export SET_TARGET_GCC_MINOR=9;
export SET_CLOOG_VERSION=0.18.4;
export SET_ISL_VERSION=0.15;
export SET_HOST_BUILD=x86_64-linux-gnu;
export SET_TARGET=arm-linux-gnueabi;
export SET_TARGET_GCC=arm-eabi-gcc
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01';
export SABERMOD_BUILD_ARCH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
export ENABLE_O3="-O3";
export ENABLE_PTHREAD="-pthread";
export gcc_cv_use_emutls=yes;
export libgomp_cv_have_attribute_visibility=yes;

# Attempt to speed up compilation by linking everything to /tmp filesystem
# Also find toolchain root
if test -d /tmp/sm-tc;
then
    rm -rf /tmp/sm-tc;
fi;
cd ../../;
export TOOLCHAIN_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
cd /tmp && ln -s $TOOLCHAIN_ROOT /tmp/sm-tc && cd /tmp/sm-tc;
export TOOLCHAIN_ROOT_SYMBOLIC="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

export BUILD_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/build;
cd $BUILD_PATH;

# Try to overclock a little by adding two extra threads to shorten build time.
# Only supported up to 16 cores, after which it's automatic.
export JOBS="$(cat /proc/cpuinfo | grep -c processor)";

if [ $JOBS = "4" ];
then
    export MAKE_FLAGS="-j6";
elif [ $JOBS = "6" ];
then
    export MAKE_FLAGS="-j8";
elif [ $JOBS = "8" ];
then
    export MAKE_FLAGS="-j10";
elif [ $JOBS = "10" ];
then
    export MAKE_FLAGS="-j12";
elif [ $JOBS = "12" ];
then
    export MAKE_FLAGS="-j14";
elif [ $JOBS = "14" ];
then
    export MAKE_FLAGS="-j16";
else
    export MAKE_FLAGS=-j"$JOBS";
fi;

# Set log location
export LOG_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/smbuild/.log
if [ ! -d $LOG_PATH ];
then
    mkdir -p $LOG_PATH;
fi;

export MAKE_LOG=$LOG_PATH/$SET_TARGET-$SET_TARGET_GCC_MAJOR-$SET_TARGET_GCC_MINOR.log;

# Make a clean build
if test -f Makefile;
then
    echo "";
    echo "";
    echo "";
    echo -e "${CLR_BLD_BLU}Cleaning ...${CLR_RST}";
    make $MAKE_FLAGS clean -k > $MAKE_LOG 2>&1;
    make $MAKE_FLAGS distclean -k >> $MAKE_LOG 2>&1;
fi;

# Lets remove all the autom4te.cache that can be found
for autom4te in `find $TOOLCHAIN_ROOT_SYMBOLIC -type d -name autom4te.cache`;
do
    rm -rf $autom4te;
done;

export TOOLCHAIN_PREFIX_PATH=~/tmp/$SET_TARGET-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR;

if test -d $TOOLCHAIN_PREFIX_PATH;
then
    rm -rf $TOOLCHAIN_PREFIX_PATH;
    mkdir -p $TOOLCHAIN_PREFIX_PATH;
else
    mkdir -p $TOOLCHAIN_PREFIX_PATH;
fi;

# Path for host libs and includes
export HOST_PREFIX_PATH=$TOOLCHAIN_PREFIX_PATH;
export HOST_LIB_PATH=$HOST_PREFIX_PATH/lib;
export HOST_INC_PATH=$HOST_PREFIX_PATH/include;
export HOST_PREFIX=--prefix=$HOST_PREFIX_PATH;
export CLOOG_INSTALLED=$HOST_LIB_PATH/libcloog-isl.a;
export MPFR_INSTALLED=$HOST_LIB_PATH/libmpfr.a;
export GMP_INSTALLED=$HOST_LIB_PATH/libgmp.a;

# Sabermod build bot scripts.  Handles building, and build error checking.
export SMBUILD_BOT_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/smbuild/sm-build-bot;
export SMBUILD=$SMBUILD_BOT_PATH/build;
export SMSUCCESS=$SMBUILD_BOT_PATH/build-success;
export SMFAILED=$SMBUILD_BOT_PATH/build-failed;

# CLOOG
export SET_TARGET_BUILD=CLOOG;

bash $SMBUILD;

# Is CLOOG Installed?
if test -f $CLOOG_INSTALLED;
then
    export CLOOG_INSTALLED=yes;
    bash $SMSUCCESS;
else
    export CLOOG_INSTALLED=no;
fi;

# MPFR
export SET_TARGET_BUILD=MPFR;

bash $SMBUILD;

# Is MPFR Installed?
if test -f $MPFR_INSTALLED;
then
    export MPFR_INSTALLED=yes;
    bash $SMSUCCESS;
else
    export MPFR_INSTALLED=no;
fi;

# GMP
export SET_TARGET_BUILD=GMP;

bash $SMBUILD;

# Is GMP Installed?
if test -f $GMP_INSTALLED ;
then
    export GMP_INSTALLED=yes;
    bash $SMSUCCESS;
else
    export GMP_INSTALLED=no;
fi;

cd $BUILD_PATH;

# Did we make it?
if [ $CLOOG_INSTALLED = "yes" ] && [ $MPFR_INSTALLED = "yes" ] && [ $GMP_INSTALLED = "yes" ];
then

    sleep 5;

    echo -e "${CLR_BLD_BLU}Preparing sabermod toolchain sources ...${CLR_RST}";
    echo "";
    echo "";
    echo "";

    # sysroot
    cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard >> $MAKE_LOG 2>&1 && git fetch sm gcc-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR >> $MAKE_LOG 2>&1 && git checkout FETCH_HEAD >> $MAKE_LOG 2>&1 && cd $BUILD_PATH;
    export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
    export SYSROOT_DEST_PATH=$TOOLCHAIN_PREFIX_PATH/arch-arm;
    cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
    export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;

    # Make sure ISL is on the right 0.15 branch
    cd $TOOLCHAIN_ROOT_SYMBOLIC/isl/isl-$SET_ISL_VERSION && git fetch sm gcc-5 >> $MAKE_LOG 2>&1 && git checkout FETCH_HEAD >> $MAKE_LOG 2>&1;

    # Make sure gcc is on the right remote branch 4.9.x
    cd "$TOOLCHAIN_ROOT_SYMBOLIC/gcc/gcc-SaberMod" && rm -rf * && git reset --hard >> $MAKE_LOG 2>&1 && git fetch smhub $SET_GCC_VERSION >> $MAKE_LOG 2>&1 && git checkout FETCH_HEAD >> $MAKE_LOG 2>&1 && cd $BUILD_PATH;

    # make libs and includes available
    export SYSROOT_LIB_PATH=$SYSROOT_DEST_PATH/usr/lib;
    export LD_LIBRARY_PATH=$SYSROOT_LIB_PATH:$HOST_LIB_PATH;
    export C_INCLUDE_PATH=$HOST_INC_PATH;
    export CPLUS_INCLUDE_PATH=$HOST_INC_PATH;
    export TOOLCHAIN_PREFIX=--prefix=$TOOLCHAIN_PREFIX_PATH;

    # GCC Build Configuration
    ./configure $TOOLCHAIN_PREFIX $SYSROOT --host=$SET_HOST_BUILD --build=$SET_HOST_BUILD --target=$SET_TARGET --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-gold --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --disable-bootstrap --with-python --with-gnu-ld --with-gnu-as --disable-werror --with-gxx-include-dir=$SYSROOT_DEST_PATH/c++ --enable-silent-rules --enable-static --enable-initfini-array --enable-plugins --with-gold-version=android --disable-libsanitizer >> $MAKE_LOG 2>&1;

    export SET_TARGET_BUILD=GCC;

    bash $SMBUILD;

    export GCC_INSTALLED=$TOOLCHAIN_PREFIX_PATH/bin/$SET_TARGET_GCC;

    LIB_GCC="$TOOLCHAIN_PREFIX_PATH/lib/gcc/$SET_TARGET/$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR.x-sabermod/libgcc.a";

    # Did we make it?
    if test -f $GCC_INSTALLED && test -f $LIB_GCC;
    then

        # Cleanup
        rm -rf $SYSROOT_DEST_PATH;
        for la in `find $TOOLCHAIN_PREFIX_PATH -name *.la`;
        do
            rm $la;
        done;
        for pc in `find $TOOLCHAIN_PREFIX_PATH -name *.pc`;
        do
            rm $pc;
        done;
        for cmake in `find $TOOLCHAIN_PREFIX_PATH -name *.cmake`;
        do
            rm $cmake;
        done;

        # Install libgomp prebuilt libs
        cp $TOOLCHAIN_ROOT_SYMBOLIC/prebuilts/arm/gcc-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR/lib/libgomp.a $HOST_LIB_PATH/libgomp.a;
        cp $TOOLCHAIN_ROOT_SYMBOLIC/prebuilts/arm/gcc-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR/lib/libgomp.spec $HOST_LIB_PATH/libgomp.spec;
        cp $TOOLCHAIN_ROOT_SYMBOLIC/prebuilts/arm/gcc-$SET_TARGET_GCC_MAJOR.$SET_TARGET_GCC_MINOR/include/omp.h $HOST_INC_PATH/omp.h;

        # Create VERSION and GCC-CONFIG files
        # With these the android ROM sabermod-vendor will no longer
        # need to read binary string information.  Instead it can read
        # these files.
        GCC_EXECUTE="$TOOLCHAIN_PREFIX_PATH/bin/./$SET_TARGET_GCC";
        `$GCC_EXECUTE --version > $TOOLCHAIN_PREFIX_PATH/VERSION`;
        `$GCC_EXECUTE -v`;

        echo "Sources read: https://gitlab.com/SaberMod/sabermod-manifest/blob/master/README.md" >> $TOOLCHAIN_PREFIX_PATH/SOURCES;

        bash $SMSUCCESS;
    else
        bash $SMFAILED;
    fi;
else
    bash $SMFAILED;
fi;

cd $SABERMOD_BUILD_ARCH;
